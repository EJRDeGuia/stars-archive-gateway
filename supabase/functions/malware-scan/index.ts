import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

// Define suspicious file patterns - more lenient for academic PDFs
// PDFs can legitimately contain JavaScript, event handlers, and metadata
// Focus on actual executable threats rather than PDF features
const SUSPICIOUS_PATTERNS = [
  /\.exe\s*$/gi,
  /\.scr\s*$/gi,
  /\.bat\s*$/gi,
  /\.cmd\s*$/gi,
  /\.vbs\s*$/gi,
]

// Simplified malicious keywords - avoid false positives from academic content
const MALICIOUS_KEYWORDS = [
  'verified_malware_signature',  // Only flag if explicitly marked malicious
]

// File type validation
const ALLOWED_MIME_TYPES = [
  'application/pdf',
  'application/msword',
  'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
  'text/plain'
]

const MAX_FILE_SIZE = 50 * 1024 * 1024 // 50MB

function analyzeFileContent(content: string, fileName: string): { 
  isClean: boolean, 
  threats: string[], 
  riskLevel: 'low' | 'medium' | 'high' 
} {
  const threats: string[] = []
  let riskLevel: 'low' | 'medium' | 'high' = 'low'

  // Check file extension - only block executables
  const fileExt = fileName.split('.').pop()?.toLowerCase()
  if (fileExt && !['pdf', 'doc', 'docx', 'txt'].includes(fileExt)) {
    threats.push(`Invalid file extension: .${fileExt}`)
    riskLevel = 'high'
    return { isClean: false, threats, riskLevel }
  }

  // For PDFs, perform minimal checks to avoid false positives
  if (fileExt === 'pdf') {
    // PDFs legitimately contain binary data, JavaScript, metadata
    // Only check for actual embedded executables (PE/MZ headers at start)
    const firstBytes = content.substring(0, 100)
    if (firstBytes.startsWith('MZ') || firstBytes.startsWith('PE')) {
      threats.push('Embedded executable detected at file start')
      riskLevel = 'high'
    }
    
    // PDFs should start with %PDF
    if (!content.startsWith('%PDF')) {
      threats.push('Invalid PDF header')
      riskLevel = 'medium'
    }
  }

  // Check for obviously suspicious patterns in filename only
  SUSPICIOUS_PATTERNS.forEach((pattern) => {
    if (pattern.test(fileName)) {
      threats.push(`Suspicious file pattern: ${pattern.source}`)
      riskLevel = 'high'
    }
  })

  return {
    isClean: threats.length === 0,
    threats,
    riskLevel
  }
}

Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    const { filePath, fileName, fileSize, mimeType } = await req.json()
    
    console.log('Starting local security scan for:', fileName)

    // Basic validation checks
    if (fileSize > MAX_FILE_SIZE) {
      throw new Error(`File size exceeds limit: ${fileSize} bytes`)
    }

    if (mimeType && !ALLOWED_MIME_TYPES.includes(mimeType)) {
      throw new Error(`File type not allowed: ${mimeType}`)
    }

    // Download file from Supabase Storage for content analysis
    const { data: fileData, error: downloadError } = await supabaseClient
      .storage
      .from('thesis-pdfs')
      .download(filePath)

    if (downloadError || !fileData) {
      throw new Error(`Failed to download file: ${downloadError?.message}`)
    }

    // Convert to text for pattern analysis (for PDFs this will be binary, but we can still check)
    const arrayBuffer = await fileData.arrayBuffer()
    const textContent = new TextDecoder('utf-8', { fatal: false }).decode(arrayBuffer)
    
    // Analyze file content
    const analysis = analyzeFileContent(textContent, fileName)
    
    let scanResult = 'clean'
    let threatDetails = null
    
    if (!analysis.isClean) {
      if (analysis.riskLevel === 'high') {
        scanResult = 'malicious'
      } else {
        scanResult = 'suspicious'
      }
      
      threatDetails = {
        threats: analysis.threats,
        riskLevel: analysis.riskLevel,
        scanType: 'local_pattern_analysis'
      }
    }

    // Store scan results in database
    const { error: insertError } = await supabaseClient
      .from('file_scan_results')
      .insert({
        file_path: filePath,
        file_name: fileName,
        scan_result: scanResult,
        threat_details: threatDetails,
        scan_provider: 'local_analysis',
        file_size: fileSize
      })

    if (insertError) {
      console.error('Failed to store scan results:', insertError)
      // Don't fail the entire operation for logging issues
    }

    // Log security event
    await supabaseClient.rpc('log_audit_event', {
      _action: 'file_security_scan',
      _resource_type: 'file',
      _details: JSON.stringify({
        fileName,
        filePath,
        scanResult,
        threatDetails,
        fileSize
      })
    })

    console.log(`Security scan completed for ${fileName}:`, scanResult)

    return new Response(
      JSON.stringify({
        success: true,
        scanResult,
        threatDetails,
        message: `File scanned successfully using local analysis. Result: ${scanResult}`
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      }
    )

  } catch (error: unknown) {
    console.error('Malware scan error:', error)
    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred'
    return new Response(
      JSON.stringify({
        error: 'Security scan failed',
        details: errorMessage
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500,
      }
    )
  }
})